<?php

namespace App\Http\Traits;

use App\Models\Transaction;

trait TransactionTrait {
    public function validate_transaction ($user_id, $user_balance, $amount, $bet_id, $transaction_id, $transaction_type){

        if (Transaction::where('transaction_id', '=', $transaction_id)
            ->where('transaction_type', '=', $transaction_type)->exists()) {
            $info['already_processed'] = 1;

        } else {
            ($transaction_type === 'payin') ? $this->validate_payin($user_id, $user_balance, $amount, $bet_id, $transaction_id, 'payin') : $this->validate_payout($user_id, $amount, $bet_id, $transaction_id, 'payout');
        }
    }

    public function validate_payin($transaction_id, $user_id, $user_balance, $amount, $bet_id){
        if ($user_balance >= $amount) {//balance > amount
            $this->userRepository->updateBalance($user_id, array($user_id, $amount, 'eur', $bet_id, $transaction_id, 'payin'));
            $info['already_processed'] = 0;

        } else {
            //$this->generateErrorResponse("0", "703", "insufficient balance")
            return false;
        }
    }

    public function validate_payout($transaction_id, $user_id, $amount, $bet_id){

        if($this->doesEntryExist('bet_id', $bet_id, 'payin')){
            if(Transaction::where('transaction_id', '<>', $transaction_id)
            ->where('transaction_type', '=', 'payout')
            ->where('bet_id', '=', $bet_id)
            ->exists()){
                $info['already_processed'] = 1;

            } else {
                $this->userRepository->updateBalance($user_id, array($user_id, $amount, 'eur', $bet_id, $transaction_id, 'payout'))
                ? $info['already_processed'] = 0 
                :  $response_errors = $this->generateErrorResponse("0", "701", "Transaction failed"); 
            }
        } else {
            //$response_errors = $this->generateErrorResponse("0", "700", "there is no PAYIN with provided bet_id");
            return false;
        }
    }
}